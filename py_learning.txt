python - высокоуровневый (основная черта абстракция, т.е. введение смысловых конструкций, описывающих структуры данных и операции над ними) язык с динамической строгой типизацией данных и автоматическим управлением памятью. Особенностью является выделение блоков кода пробельными отступами.
Python - интерпретируемый язык, т.е. он не конвертирует свой код в машинный код. Python интерпретатор переводит код программы в байт - код , который запускается на виртуальной машине Python (PVM).
Интерпретатор - программа, которая конвертирует инструкции, написанные на python коде, в байт - код, а затем выполняет их. По сути, интерпретатор - программный слой между кодом и железом. Существует два типа:
    1. Простой интерпретатор - берет часть кода, транслирует ее, выполняет, затем берет вторую часть кода, транслирует и выполняет.
    2. Интерпретатор компилирующего типа - система из компилятора и интерпретатора. Компилятор переводит исходный код в промежуточное представление (байт - код), а интерпретатор (виртуальная машина) (CPython) выполняет байт - код.

Также является мультипарадигменным (парадигма - совокупность идей, определяющих стиль написания комп. программ) языком, т.е. его особенности унаследованы от других языков.
Основные черты: динамическая типизация, автоматическое управление памятью, полная интроспекция (возможность запросить тип и структуру объекта во время выполнения программы).
Тип переменной присваивается в момент присваивания того или иного значения, пр.: a = 7 - тип int, a = 'hello world' - тип str. В случае с a = 7, переменная a хранит ссылку на объект со значением 7. В python не хранят значения, а лишь ссылки на тот или иной объект.
Пример каскадного присваивания: a = b = c = 0
Функция id - выводит идентификатор для значения объекта
Множественное присваивание: a, b = 1, 2
Функция type() - возвращает тип данных значения аргумента
Функция math.ceil() - округление до большего целого
Функция math.floor() - округление до меньшего целого


Функция считывания данных от пользователя - input(), тип данных аргумента при вызове функции - string, для переопределения типа данных нужно использовать: int(input("")) и т.д. для других значений

Проверка на попадание числа в диапазон:
    n = 2
    print( -2 <= n <= 2) # True

Строки:
print(f"Text: {x}; another text: {y}") - f строки
    - Можно использовать в одинарных, двойных, тройных одинарных, тройных двойных
    - Чтобы перенести строку без использования спец. символа переноса строк, можно использовать тройные одинарные, тройные двойные
    - функция len() - длина строки
    - оператор in - вхождение подстроки в строку: 'ab' in "abc"
    - пример сравнения строк: 'кот' > 'кит' # True
        При сравнении каждого символа последовательно - "к" + "к", "о" + "и", "т" + "т", символы "к" и "т" будут равными между собой, но "о" в алфавите стоит дальше чем и соответственно, "о" больше чем "и". Символы сравниваются по таблице ASCII.
    - ord() - определение кода символа



